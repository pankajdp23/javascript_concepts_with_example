/*
# How many ways to Center child element in Parent element in CSS: 

There are multiple ways to center a child element within a parent element using CSS. 
The approach you choose depends on the specific layout and requirements of your design. 
Here are some common methods:
*/

/* 1. Using Flexbox:
Flexbox is a powerful layout model that makes it easy to center elements both horizontally 
and vertically. */
.parent {
  display: flex;
  justify-content: center; /* Horizontal centering */
  align-items: center; /* Vertical centering */
}

/* 2. Using Grid:
CSS Grid is another layout model that can be used to center elements. */
.parent {
  display: grid;
  place-items: center;
}

/* 3. Using Auto Margins:
This method centers an element horizontally by using auto margins. */
.child {
  margin-left: auto;
  margin-right: auto;
}

/* 4. Using Absolute Positioning:
This method centers the element by using absolute positioning and a combination of top, 
bottom, left, and right. */
.parent {
  position: relative;
}

.child {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

/* 5. Using Text Alignment (Inline Elements):
If the child element is an inline or inline-block element, 
you can use text alignment to center it horizontally. */
.parent {
  text-align: center;
}

/* 6. Using Line Height (Single Line Text):
For single-line text within a block element, you can use line height to vertically center it. */
.parent {
  /* line-height: set to parent's height */
}

/* 7. Using Flexbox Centering for Block Elements:
For block elements, you can use Flexbox centering on the parent and 
align the child to the center. */
.parent {
  display: flex;
  justify-content: center;
}

.child {
  align-self: center;
}

/* // 8. Using Grid Centering for Block Elements:
Similar to Flexbox, you can use Grid centering on the parent and align the child to the center. */
.parent {
  display: grid;
  place-content: center;
}

.child {
  justify-self: center;
  align-self: center;
}


/* Remember that the appropriate method to use depends on the layout context and the elements involved. 
Some methods are more suitable for certain scenarios, and 
you should choose the one that best fits your design requirements. */